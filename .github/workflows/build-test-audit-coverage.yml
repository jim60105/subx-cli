name: Build, Test, Audit & Coverage

on:
  push:
    branches: [ master ]
    paths-ignore:
      - '**/*.md'
  pull_request:
    branches: [ master ]
    paths-ignore:
      - '**/*.md'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-nextest

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Check clippy
      run: cargo clippy -- -D warnings

    - name: Comprehensive Code Quality Check with tests
      run: |
        # Make the code check script executable (if not already)
        chmod +x scripts/quality_check.sh
        
        # Run the comprehensive code quality check script with CI profile
        ./scripts/quality_check.sh -v -p ci
      env:
        RUST_LOG: debug

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Audit Rust Dependencies
      uses: actions-rust-lang/audit@v1.2.4

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-llvm-cov

    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-nextest

    - name: Install dependencies for coverage check
      run: |
        sudo apt-get update
        sudo apt-get install -y jq bc

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    - name: Upload to codecov.io
      uses: codecov/codecov-action@v5
      with:
        files: lcov.info
        fail_ci_if_error: false

    - name: Check coverage threshold
      run: |
        # Make the coverage check script executable
        chmod +x scripts/check_coverage.sh
        
        # Run coverage threshold check with verbose output
        ./scripts/check_coverage.sh -T
      env:
        COVERAGE_THRESHOLD: 75
